# -*- coding: utf-8 -*-
"""heart_disease_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L6y5h8Hm7nWgSD_dEhwmXJszIf2VVtat
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import pickle

# heart_data = pd.read_csv('heart_disease_data.csv')  #loading the data form the csv file

# # heart_data['target'].value_counts()   #Here 1 indicates defective heart and 0 indicates healthy heart

# x=heart_data.drop(columns='target',axis=1)
# y=heart_data['target']

# x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2) #splitting the data into training data & test data

# model=LogisticRegression()

# model.fit(x_train,y_train)  # Training the Logisticregression model with the training data

# # x_train_prediction=model.predict(x_train)
# # training_data_accuracy=accuracy_score(x_train_prediction,y_train) #accuracy on training data

# # print('Accuracy on training data : ',training_data_accuracy)

# # x_test_prediction = model.predict(x_test)
# # test_data_accuracy = accuracy_score(x_test_prediction, y_test) #accuracy on test data

# # print('Accuracy on test data : ',test_data_accuracy)

# #Making the prediction system
# #input we need are :
# #age,sex(0=male or 1=female),cp(1=typical angina : 2=atypical angina : 3=non-anginal pain : 4=asymptomatic),trestbps(resting blood pressure mm Hg),chol(cholesterol measurement mg/dl),fbs(fasting blood sugar(0=false,1=true)),restecg(Resting electrocardiographic measurement (0 = normal, 1 = having ST-T, 2 =hypertrophy)),thalach(The person's maximum heart rate achieved),exang(Exercise induced angina (1 = yes; 0 = no))
# #oldpeak(ST depression induced by exercise relative to rest),slope(the slope of the peak exercise ST segment(1-upsloping, 2-flat, 3-downsloping)),ca(number of major vessels colored by flourosopy),thal(thalassemia(3-normal, 6-fixed defect, 7-reversable defect))
inputdata=(56,0,1,140,294,0,0,153,0,1.3,1,0,2)

inputdata_asnumpyarray=np.asarray(inputdata) #changing the input for the numpy array

inputdata_reshape=inputdata_asnumpyarray.reshape(1,-1)

# prediction=model.predict(inputdata_reshape)
# if(prediction[0]==0):
#   print('The Person have Healthy heart ')
# else:
#   print('The Person have Heart Disease')

filename='heartdis_pred_model'
# pickle.dump(model,open(filename,'wb'))

loadedmodel=pickle.load(open(filename,'rb'))

cred=loadedmodel.predict(inputdata_reshape)
if(cred[0]==0):
  print('The Person have Healthy heart ')
else:
  print('The Person have Heart Disease')